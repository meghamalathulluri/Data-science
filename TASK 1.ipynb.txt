{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c71f8cba",
   "metadata": {},
   "source": [
    "# TASK 1\n",
    "### DONE BY MEGHAMALA\n",
    "### SUPERVISED LEARNING\n",
    "#### PREDICT THE PERCENTAGE OF AN STUDENT BASED ON THE NO.OF STUDY HOURS\n",
    "DATA LINK GIVEN IS http://bit.ly/w-data\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a863517c",
   "metadata": {},
   "source": [
    "**Importing the libraries that are required**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "7dea5608",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b919872c",
   "metadata": {},
   "source": [
    "**Let's read the text**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4ac80738",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data imported succesfully\n"
     ]
    }
   ],
   "source": [
    "df=pd.read_csv(\"student.csv\")\n",
    "print(\"data imported succesfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "bd35ca2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Hours  Scores\n",
       "0    2.5      21\n",
       "1    5.1      47\n",
       "2    3.2      27\n",
       "3    8.5      75\n",
       "4    3.5      30"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "155aac67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25 entries, 0 to 24\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   Hours   25 non-null     float64\n",
      " 1   Scores  25 non-null     int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 528.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "642e723d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25, 2)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "c82435f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.012000</td>\n",
       "      <td>51.480000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.525094</td>\n",
       "      <td>25.286887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.100000</td>\n",
       "      <td>17.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.700000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.800000</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.400000</td>\n",
       "      <td>75.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.200000</td>\n",
       "      <td>95.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Hours     Scores\n",
       "count  25.000000  25.000000\n",
       "mean    5.012000  51.480000\n",
       "std     2.525094  25.286887\n",
       "min     1.100000  17.000000\n",
       "25%     2.700000  30.000000\n",
       "50%     4.800000  47.000000\n",
       "75%     7.400000  75.000000\n",
       "max     9.200000  95.000000"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "989c87df",
   "metadata": {},
   "source": [
    "**Checking for null values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "a3fd78c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hours     0\n",
       "Scores    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d6e1d94",
   "metadata": {},
   "source": [
    "**There are no null values in the data**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69b1e2f1",
   "metadata": {},
   "source": [
    "**Plotting the distribution of hours**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "261e77f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(x=\"Hours\",y='Scores',color='g',style='o')\n",
    "plt.xlabel('Hours selected')\n",
    "plt.ylabel('Percentage Score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13145810",
   "metadata": {},
   "source": [
    "**let us obtain the relation between two variables by regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "56f7e232",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Hours', ylabel='Scores'>"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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rzfaofRSU1OjLVmyRKurq9M8Ho92yy23aO+99160wwr6/PPPtRUrVmhNTU3RDkVzOBzaggULtKamJs3r9Wpf/epXtYqKimiHpVVUVGhr1qzROjo6NJ/Pp91zzz3am2++OWLvP67uHF544QUeeeQRMjIyoh0KAOnp6fzoRz/CZDJhNBqZPHkyp06dinZYLFy4kD/96U8YDAaamprw+/3YbLZoh0VraysbN27k3nvvjXYoQV9++SUA3/zmN7n++uv585//HOWIArZs2cKqVavIysrCaDSyceNGZs+eHe2wgn7605+yYcMGUlJSoh0Kfr8fVVVxOp34fD58Ph9msznaYfHpp5+yZMkS4uPj0ev1LF26lLfffnvE3n9cJYfHH3+cK664ItphBF1yySXMmTMHgKqqKt544w2Ki4ujG1QXo9HIM888w+rVqyksLCQzMzPaIfGTn/yEDRs2kJiYGO1Qgtrb2yksLOS3v/0tf/jDH/jrX/9KRUVFtMOiuroav9/Pvffey7p163j++edJSkqKdlgAVFZW4nK5KC0tjXYoAMTHx/O9732P0tJSiouLycnJYd68edEOixkzZrBjxw5aW1txu91s3bqVxsbGEXv/cZUcYtXRo0f55je/yQMPPEBBQUG0wwn67ne/y86dO6mrq+OFF16IaiybNm0iOzubwsLCqMbR19y5c3nqqadISEggJSWFr371q2zbti3aYeH3+9m5cyc///nP+dvf/sbBgwd5+eWXox0WAH/961/5xje+Ee0wgg4fPsyLL77Iu+++y/bt29HpdDz77LPRDovCwkLWr1/Pbbfdxl133cX8+fMxGo0j9v6SHKJs37593Hnnndx///185StfiXY4ABw7dozPPvsMAKvVysqVKzly5EhUY3r99depqKhg3bp1PPPMM2zdupWf//znUY0J4IMPPmDnzp3BX2uahsEQ/TEpaWlpFBYWkpKSgsViYfny5Rw8eDDaYeHxeNi7dy/XXHNNtEMJ2rFjB4WFhaSmpmIymVi/fj179uyJdljY7XZWrlzJ5s2bee655zCZTOTm5o7Y+0tyiKK6ujq+853v8PTTT7N69epohxN04sQJHn74YTweDx6Ph3feeYf58+dHNabf//73lJWV8corr/Dd736Xa665hoceeiiqMQF0dHTw1FNP4Xa7sdvtvPzyy6xYsSLaYbFs2TJ27NhBe3s7fr+f7du3M2PGjGiHxZEjRygoKIiJPaxu06dPp7KyEofDgaZpbN26lZkzZ0Y7LE6cOMG3v/1tfD4fHR0d/P3vfx/Rpbjof8UZx5599lncbjdPPvlk8LGbb76ZW265JYpRQXFxMQcPHuSGG25Ar9ezcuXKmEpesWTZsmUcOHCAG264AVVVufXWW5k7d260w2L27Nncdddd3HrrrXi9XhYvXsyNN94Y7bCora0lKysr2mH0smTJEj799FPWr1+P0Whk5syZ3H333dEOi+nTp7Ny5Uquv/56/H4/d95554h+SZNJcEIIIULIspIQQogQkhyEEEKEkOQghBAihCQHIYQQISQ5CCGECCHJQYghTJs2jebm5l6PvfTSS9xzzz1RikiIyJPkIIQQIoQcghPiPHV0dPCzn/2Mw4cPoygKS5cu5Qc/+AEGg4Fp06axc+fOYPfR7l8fPXqUxx9/HJvNRmdnJ88//zw//vGPqa6uRqfTMWPGDB599FF0Ovn+JqJDkoMQYbjjjjt6fVC3tbUxbdo0AB577DEmTJjA5s2b8Xq9fOtb3+J//ud/hjxle/ToUd5++21ycnL4xz/+QWdnJ6+88gp+v59HHnmE2tpa8vPzI/pzCTEQSQ5ChOGPf/xjr9kDL730Em+++SYA77//Pv/7v/+LoiiYTCZuvvlm/vjHPw6ZHLKzs8nJyQFg/vz5bNy4kdtuu42ioiLuuOMOSQwiquSeVYjzpKoqiqL0+rXP5wt5nsfj6fXrns3ncnNz2bJlC3fffTd2u51vfOMbbN26NXJBCzEESQ5CnKclS5bw5z//GU3T8Hg8vPDCCxQVFQGQkpLCoUOHACgrKxvwGs8//zz/8i//wpIlS/jnf/7nYDM4IaJFkoMQ5+nhhx+mubmZtWvXsnbtWi666KLgKNOHH36YRx99lK985SscO3aM9PT0fq9xww034Pf7WbVqFevXr6ejo4PbbrttJH8MIXqRrqxCCCFCyJ2DEEKIEJIchBBChJDkIIQQIoQkByGEECEkOQghhAghyUEIIUQISQ5CCCFCSHIQQggR4v8D1iF3A+POLkAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style='darkgrid')\n",
    "sns.regplot(x=df['Hours'],y=df['Scores'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ff3da1b",
   "metadata": {},
   "source": [
    "**From this we can observe a linear relation between them..Now preparing the data to build a model**\n",
    "Here we will seperate the dataset into \"input\" variables and \"output\" variables..Since there were no null values and both coloumn data are numeric,data cleaning and manipulation was not required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "79c45753",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.iloc[:,:-1].values #features\n",
    "y=df.iloc[:,-1].values #targets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b008a494",
   "metadata": {},
   "source": [
    "**Training the algorithm**\n",
    "We build our training and testing models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "197f21ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([47, 35, 20, 27, 41, 95, 75, 30, 30, 24, 54, 67, 86, 60, 85, 17, 69,\n",
       "       88], dtype=int64)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)\n",
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542b7bd9",
   "metadata": {},
   "source": [
    "**Importing linear regression algorithm from sklearn**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "2072d583",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training complete\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "regressor=LinearRegression()\n",
    "regressor.fit(x_train,y_train)\n",
    "print(\"Training complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc8c6e58",
   "metadata": {},
   "source": [
    "**Getting the regression cofficient and the intercept values to plot our graph**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "10085cbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cofficient:  [9.71409219]\n",
      "Intercept:  2.480367091505748\n"
     ]
    }
   ],
   "source": [
    "print(\"Cofficient: \",regressor.coef_)\n",
    "print(\"Intercept: \",regressor.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d536a090",
   "metadata": {},
   "source": [
    "**Plotting our linear regression model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "08ace70f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "line=regressor.coef_*x+regressor.intercept_\n",
    "#plotting for the test data\n",
    "plt.scatter(x,line,color='g',label='Regression Line')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05b74b92",
   "metadata": {},
   "source": [
    "**Now predicting the score in Percentage**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "ff136d13",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no.of hours studied\n",
      " [[8.3]\n",
      " [2.5]\n",
      " [2.5]\n",
      " [6.9]\n",
      " [5.9]\n",
      " [2.7]\n",
      " [3.3]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual Score</th>\n",
       "      <th>Predicted score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>81</td>\n",
       "      <td>83.107332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30</td>\n",
       "      <td>26.765598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>26.765598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>76</td>\n",
       "      <td>69.507603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62</td>\n",
       "      <td>59.793511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25</td>\n",
       "      <td>28.708416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>42</td>\n",
       "      <td>34.536871</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Actual Score  Predicted score\n",
       "0            81        83.107332\n",
       "1            30        26.765598\n",
       "2            21        26.765598\n",
       "3            76        69.507603\n",
       "4            62        59.793511\n",
       "5            25        28.708416\n",
       "6            42        34.536871"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred=regressor.predict(x_test)\n",
    "print(\"no.of hours studied\\n\",x_test)\n",
    "df1=pd.DataFrame({'Actual Score':y_test,'Predicted score':y_pred})\n",
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "713d6988",
   "metadata": {},
   "source": [
    "We see that the predicted values are close to the actual values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "75f841a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training score: 0.9514783240656935\n",
      "Test score: 0.9553509219739938\n"
     ]
    }
   ],
   "source": [
    "#Estimating the training and test score\n",
    "print(\"Training score:\",regressor.score(x_train,y_train))\n",
    "print(\"Test score:\",regressor.score(x_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcf4734e",
   "metadata": {},
   "source": [
    "**Plotting the actual and predicted values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c10a03e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1.plot(kind='bar')\n",
    "plt.title(\"actual vs predicted\")\n",
    "plt.xlabel(\"student no.of.hours\")\n",
    "plt.ylabel(\"percentage obtained\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9bd23c1",
   "metadata": {},
   "source": [
    "**Solving the given problem statement i.e \n",
    "Predicting the score if hours=9.25**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "862f14cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No.of hours studied= 9.25\n",
      "Predicted scores=92.34\n"
     ]
    }
   ],
   "source": [
    "hours=9.25\n",
    "fin_pred=round(regressor.predict([[9.25]]) [0],2)\n",
    "print(\"No.of hours studied= {}\".format(hours))\n",
    "print(\"Predicted scores={}\".format(fin_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c2a2d31",
   "metadata": {},
   "source": [
    "**CALCULATING MEAN ABSOLUTE ERROR**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "7a8c9561",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MEAN ABSOLUTE ERROR: 4.425394675156183\n",
      "MEAN SQUARED ERROR: 23.516396034595225\n",
      "ROOT MEAN SQUARED ERROR: 4.8493706843873285\n",
      "R-2: 0.9553509219739938\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print('MEAN ABSOLUTE ERROR:',metrics.mean_absolute_error(y_test,y_pred))\n",
    "print('MEAN SQUARED ERROR:',metrics.mean_squared_error(y_test,y_pred))\n",
    "print('ROOT MEAN SQUARED ERROR:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\n",
    "print('R-2:',metrics.r2_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e80b331a",
   "metadata": {},
   "source": [
    "Hence we can conclude that the accuracy of our model is 95%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a43e3fb7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
